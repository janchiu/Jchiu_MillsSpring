package textExcel;
/*
public class RealCell implements Cell {
	private String answer;
	
	public RealCell(String enteredValue) {
		answer = enteredValue;
	}
	@Override
	public String abbreviatedCellText() {
		String stuff =answer+"          ";
		return stuff.substring(0,10);
	}
	@Override
	public String fullCellText() {	
		return answer;
	}
	public double getDoubleValue(){
		return Double.parseDouble(answer);
	}
	public void setCellContents(String content) {
		answer = content;
	}
	public String getCellContents(){
		return answer;
	}
}
*/

/*
public class RealCell implements Cell {

	private String input;
	
	public RealCell(String input) {
		this.input = input;
	}

	public String abbreviatedCellText() {
		
		String abrv = input;
		abrv += "          ";
		return abrv.substring(0, 10);
	}


	public String fullCellText() {

		return this.input;
	}
	
	public double getDoubleValue(){
		return Double.parseDouble(input);
	}

}
*/
/*
public abstract class RealCell implements Cell {
	private String input;
	public RealCell(String value){
		input=value;
	}
	@Override
	public String abbreviatedCellText() {
		// TODO Auto-generated method stub
		return "";
	}
	public String getCellContents(){
		return input;
	}
	@Override
	public String fullCellText() {
		// TODO Auto-generated method stub
		return input;
	}
	public double getDoubleValue(){
	return 0.0;
	}
}
*/

/*
new stuff
public abstract class RealCell implements Cell {
	private String value;
	
	public RealCell(String input){
		value = input;
	}
	
	public String truncate(String input){
		input = input.substring(0, 10);
		return input;
	}
	
	public String abbreviatedCellText(){
		return truncate(getDouble() + "          ");
	}
	
	public String fullCellText(){
		return value;
	}
	
	public double getDouble(){
		return Double.parseDouble(value);
	}
}
*/
public class RealCell implements Cell {
private String str; //string value stored in realcell

public RealCell(String str) { //constructor
	this.str = str;
}

public String abbreviatedCellText() {
	String revisedStr = getDoubleValue() + ""; //eliminates any extra 0s, subsequently converts into string for processing
	int spaceNum = 10 - revisedStr.length(); //number of spaces left to fill cell in gridtext
	if (this.str.length() < 10) { //if revised string has less than 10 characters. returns revised string
		for (int i = spaceNum; i > 0; i--) { //for loop adds spaces based on value of spaceNum
			revisedStr += " ";
		}
		return revisedStr;
	} else if (this.str.length() == 10){ //if revised string has exactly 10 characters then return revised string and make no modifications to gridtext
		return revisedStr;
	} else { //if revised string has more than 10 charcters then substring till 10 characters
		revisedStr = this.str.substring(0, 10);
		return revisedStr;
	}
}

public String fullCellText() { //returns full and actual value of cell
	return this.str;
}

public double getDoubleValue() { //converts str into double value
	double num = Double.parseDouble(this.str);
	return num;
}
}
