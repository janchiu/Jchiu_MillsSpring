
package textExcel;

import java.io.*;
import java.util.Scanner;


public class Spreadsheet implements Grid{
	Cell[][] data;
	private int row = 20;
	private int column = 12;
	
	public Spreadsheet(){
		clear();
	}

	@Override
	public String processCommand(String command){
		String[] splitWords = command.split(" ", 3);
		//possible commands
		//clear - length 1
		//clear A1 - length 2
		/* A1 = "cat"
		 * A2 = 3.14%
		 * length 3 possibilities */

		if(command.equals("")){
			return "";
		}
		/*
		if(splitWords[0].equals("save")){
			String saveFile = splitWords[1];
			return save(saveFile);
		}
		
		if(splitWords[0].equals("open")){
			String openFile = splitWords[1];
			return open(openFile);
		}
		*/
		
		else if(splitWords.length == 3 && splitWords[2].startsWith("\"")){
			String word = splitWords[2].substring(1, splitWords[2].length() - 1);
			setCell(new SpreadsheetLocation(splitWords[0]), new TextCell(word));
			return getGridText();
		}

		else if(splitWords.length == 3 && splitWords[1].equals("=")){
			
			if(splitWords[2].contains("%")){
				String inputNumber = splitWords[2].substring(0, splitWords[2].length() - 1);
				setCell(new SpreadsheetLocation(splitWords[0]), new PercentCell(inputNumber));
				return getGridText();
			}
			
			else if(splitWords[2].startsWith("(") && splitWords[2].endsWith(")")){
				setCell(new SpreadsheetLocation(splitWords[0]), new FormulaCell(splitWords[2], this));
				return getGridText();
			//if checking for a decimal number
			}else{
				String value = splitWords[2];
				setCell(new SpreadsheetLocation(splitWords[0]), new ValueCell(value));
				return getGridText();
			}
		}

		//inspecting a single cell location - A3
		else if(splitWords.length == 1 && !splitWords[0].equalsIgnoreCase("clear")){
			String value = this.getCell(new SpreadsheetLocation(command)).fullCellText();
			if(value.endsWith(".0")){
				value = getCell(new SpreadsheetLocation(command)).fullCellText().substring(0, value.length() - 2);
			}
			return value;
		}

		//when clearing a single cell location - clear A3
		else if(splitWords.length == 2 && splitWords[0].equalsIgnoreCase("clear")){
			clearLocation(new SpreadsheetLocation(splitWords[1]));
			return getGridText();
		}

		//if only "clear" is typed, return empty spreadsheet
		else if(splitWords.length == 1 && splitWords[0].equalsIgnoreCase("clear")){
			clear();
			return getGridText();
		}
		return "";
	}


	public void clear(){
		data = new Cell[row][column];
		for(int i = 0; i < row; i++){
			for(int j = 0; j < column; j++){
				data[i][j] = new EmptyCell();
			}
		}
	}

	public void clearLocation(SpreadsheetLocation loc){
		setCell(loc, new EmptyCell());
	}
	
	public int getRows(){
		return data.length;
	}

	public int getCols(){
		return data[0].length;
	}

	//returns the cell type in that cell location
	public Cell getCell(Location loc){
		return data[loc.getRow()][loc.getCol()];
	}
	
	public void setCell(SpreadsheetLocation cellLoc, Cell value) {
		data[cellLoc.getRow()][cellLoc.getCol()] = value;
	}
	
	//prints sheet
	public String getGridText(){
		String sheet = "   ";

		//creates the columns
		for (int i = 0; i < data[0].length; i++) {
			sheet += ("|" + (char) (i + 'A') + "         ");
		}
		sheet += "|\n";

		for (int i = 0; i < data.length; i++) {
			sheet += String.format("%-3d", i + 1) + alignRow(data[i]);
		}
		return sheet;
	}
	
	//formats the rows in the sheet
	public String alignRow(Cell[] cols) {
		String row = "";
		for (Cell i : cols) {
			row += "|" + i.abbreviatedCellText();
		}
		row += "|\n";
		return row;
	}
	/*
	private String save(String filename){
		PrintStream outputFile;
		try{
			outputFile = new PrintStream(new File(filename));
		}
		catch (FileNotFoundException e){
			return "File not found: " + filename;
		}
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < column; j++) {
				Cell value = data[i][j];
				String rowNum = i + 1 + "";
				String colLetter = (char)(j + 'A') + "";
				if(!value.cellContents().equals("EmptyCell")){
					outputFile.println(colLetter + rowNum + "," + value.cellContents() + "," + value.fullCellText());
				}
			}
		}
		outputFile.close();
		return "saved " + "to " + filename;
	}

	private String open(String filename){
		Scanner inputFile;
		try{
			inputFile = new Scanner(new File(filename));
		}
		catch (FileNotFoundException e){
			return "File not found: " + filename;
		}

		while(inputFile.hasNext()){
			String s = inputFile.nextLine();
			//A1,TextCell,"Hello"
			String[] cellInfo = s.split(",");

			if(cellInfo[1].equals("TextCell")){
				String withoutQuotes = cellInfo[2].substring(1, cellInfo[2].length() - 1);
				cellInfo[2] = withoutQuotes;
			}
			else if(cellInfo[1].equals("PercentCell")){
				double parsePercent = Double.parseDouble(cellInfo[2]);
				int wholeNum = (int) (100 * parsePercent);
				String whole = wholeNum + "";
				cellInfo[2] = whole;
			}

			Cell cell = setType(cellInfo[1], cellInfo[2]);
			setCell(new SpreadsheetLocation(cellInfo[0]), cell);
		}
		return getGridText();
	}
*/
	//returns a cell of its contents to add to the opened spreadsheet file
	private Cell setType(String cellType, String value) {
		if (cellType.equals("TextCell")) {
			return new TextCell(value);
		}
		else if (cellType.equals("ValueCell")) {
			return new ValueCell(value);
		}
		else if (cellType.equals("PercentCell")) {
			return new PercentCell(value);
		}
		else if (cellType.equals("FormulaCell")) {
			return new FormulaCell(value, this);
		}
		return null;
	}
}