package textExcel;

import java.util.Arrays;
public class Spreadsheet implements Grid
{
	Cell[][] data;
	private int rows = 20;
	private int columns = 12;
	
	public Spreadsheet(){
		data = new Cell[rows][columns];
		for(int i = 0; i < rows; i++){
			for(int j = 0; j < columns; j++){
				data[i][j] = new EmptyCell();
			}
		}
	}
	
	@Override
	public String processCommand(String command){
		String[] splitWords = command.split(" ", 3);
		//possible commands
		//clear - length 1
		//clear A1 - length 2
		//A1 = "cat" - length 3
		
		if(command.equals("")){
			return "";
		}
		
		else if(splitWords.length == 3 && splitWords[2].startsWith("\"")){
			String word = splitWords[2].substring(1, splitWords[2].length() - 1);
			setCell(new SpreadsheetLocation(splitWords[0]), new TextCell(word));
			return getGridText();
		}
		
		//inspecting a single cell location - A3
		else if(splitWords.length == 1 && !splitWords[0].equalsIgnoreCase("clear")){
			Cell loc = getCell(new SpreadsheetLocation(splitWords[0]));
			return loc.fullCellText();
		}
		
		//when clearing a single cell location - clear A3
		else if(splitWords.length == 2 && splitWords[0].equalsIgnoreCase("clear")){
			clearLocation(new SpreadsheetLocation(splitWords[1]));
			return getGridText();
		}
		
		//if only "clear" is typed, return empty spreadsheet
		else if(splitWords.length == 1 && splitWords[0].equalsIgnoreCase("clear")){
			clear();
			return getGridText();
		}
		return "";
	}
	
	public Cell parseCell(String parseWord){
		if(parseWord.endsWith("\"")){
			TextCell word = new TextCell(parseWord);
			return word;
		}else{
			return new TextCell("Error");
		}
	}
	
	public void clear(){
		data = new Cell[rows][columns];
		for(int i = 0; i < rows; i++){
			for(int j = 0; j < columns; j++){
				data[i][j] = new EmptyCell();
			}
		}
	}
	
	public void clearLocation(SpreadsheetLocation loc){
		setCell(loc, new EmptyCell());
	}
	
	@Override
	public int getRows(){
		return data.length;
	}

	@Override
	public int getCols(){
		return data[0].length;
	}

	@Override
	public Cell getCell(Location loc){
		int row = loc.getRow();
		int col = loc.getCol();
		return data[row][col];
	}

	public void setCell(SpreadsheetLocation cellLoc, Cell value) {
		data[cellLoc.getRow()][cellLoc.getCol()] = value;
	}
	
	@Override
	public String getGridText(){
		String sheet = "   ";

		//creates the columns
		for (int i = 0; i < data[0].length; i++) {
			sheet += ("|" + (char) (i + 'A') + "         ");
		}
		sheet += "|\n";

		for (int i = 0; i < data.length; i++) {
			sheet += String.format("%-3d", i + 1) + alignRow(data[i]);
		}
		return sheet;
	}

	public String formatCell(Cell cell){
		return cell.abbreviatedCellText();
	}

	public String alignRow(Cell[] cols) {
		String row = "";
		for (Cell i : cols) {
			row += "|" + formatCell(i);
		}
		row += "|\n";
		return row;
	}
}